<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>netstandard2.1;netcoreapp3.1;</TargetFrameworks>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <Description>This project started off inside a Windows Forms project called Transparency Maker, which I have ported to a Blazor project that is live PixelDatabase.Net https://pixeldatabase.net.

This project has been tested while I built PixelDatabase.Net, but I am sure more updates may be needed.</Description>
    <PackageReleaseNotes>1.2.0: I added a couple of new features and fixed some bugs with the callback delegates if they were null.
New methods: 
CreateSubImage - The PixelDatabase must be loaded, pass in the TopLeft point and the rectange size.
SearchForSubImage - This method returns a SearchResult object with the TopLeft point.
class SearchResult - This class contains a Point and a Score. It has a confidence property, but I haven't coded it yet.
      
Here is a sample project you can use that takes a screen shot and you click the canvas (PictureBox) 
containing the image to create sub images.
There is also a Search Mode that demonstrates searching for an image in another image.

https://github.com/DataJuggler/SubImageCreator

Code is new, so use at your own risk. I have a sample project on GitHub to test this that takes a screen
shot and you can click the picture of the screenshot to create sub images. All more of a test than anything
useful yet, but I might expand it over time.


1.1.6: Added a new method CreateSubImage. Tested and it works, but not tested very thoroughly

1.1.5: I added a new method ApplyPixel, which was added to the .Net Framework version so I can call this from a Paint.Net plug-in

1.1.4: I had to update DataJuggler.UltimateHelper.Core.IsNumeric method to support negative numbers.

1.1.3: I removed Absolute value from BlueRedDifference, BlueGreenDifference and GreenRedDifference.
After working with these values for a few weeks, I discovered there is a difference between blue - red and red - blue, sometimes. 

1.1.2: I fixed a bug that has been bugging me for days. Now you apply a color:
Update
Set Color 98 125 86

I had forgot to set the property SetColor to true.

1.1.1: I have been working with PixelDatabase.Net website, so quite a few chagnes needed to be checked in.

1.1.0: I discovered in my initial testing that the old way was using 7 gigs of memory to hold a list of 
millions of PixelInformation objects. Now I do the BQL comparisons without instantiating tons of objects and
the memory foot print went down to under 300 meg for a Blazor website with a 20 meg image loaded.

1.0.7: I am publishing the version that is going to be on my website https://pixeldatabase.net.

This version includes many new properties on a PixelInformation object, such as:
1. Min
2. Max
3. Average
4. MinMaxDifference
5. RedMinDifference
6. RedMaxDifference
7. RedAverageDifference
8. GreenMinDifference
9. GreenMaxDifference
10. GreenAverageDifference
11. BlueMinDifference
12. BlueMaxDifference
13. BlueAverageDifference

These should all work for queries such as:

Hide Pixels Where
MinMaxDifference &gt; 25

Or

Update
Set Swap Blue Red
Where
RedMinDifference &lt; 10





1.0.6: I have been working on this project for several weeks, and I need to update Nuget.

1.0.5: I fixed a bug where Swap Colors was not taking the Alpha into account from the previous color.

1.0.4: I made some changes while working on the .Net Framework version, and I am trying to keep them in sync. The changes involved I added a new draw line in color feature, a new feature for LastUpdate can always be queried by:

Update
blah blah blah
Where
Pixels In LastUpdate

Also some changes to the Draw Line, which is still very slow, but now a message shows.
I need to create an abort for Draw Line, just haven't had a chance yet. I will work on this some more next week.

1.0.3: I added a new override to PixelDatabaseLoder for ImageUrl.

1.0.2: I had forgot to list the Project Url, as well as the description changed from untested, to lightly tested.

1.0.1: Changed TargetFramework netcoreapp3.1 to TargetFrameworks netstandard2.1;netcoreapp3.1

First release, i will update the rest of the info if it gets past proof of concept.</PackageReleaseNotes>
    <PackageIcon>Eraser.png</PackageIcon>
    <PackageIconUrl />
    <Version>1.2.0</Version>
    <PackageLicenseFile>License.txt</PackageLicenseFile>
    <UserSecretsId>35699f2d-2930-4328-a080-1aff53ed2b0f</UserSecretsId>
    <RepositoryUrl>https://github.com/DataJuggler/PixelDatabase</RepositoryUrl>
    <RepositoryType>Git - GitHub</RepositoryType>
    <PackageTags>C#,Imaging,Drawing,Bitmap,Canvas,EditImages,Pixel</PackageTags>
    <PackageProjectUrl>https://github.com/DataJuggler/PixelDatabase</PackageProjectUrl>
  </PropertyGroup>

  <ItemGroup>
    <Compile Remove="PixelInformation2.cs" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="DataJuggler.UltimateHelper.Core" Version="1.2.6" />
    <PackageReference Include="System.Drawing.Common" Version="4.7.0" />
  </ItemGroup>

  <ItemGroup>
    <None Include="Eraser.png">
      <Pack>True</Pack>
      <PackagePath></PackagePath>
    </None>
    <None Include="License\License.txt">
      <Pack>True</Pack>
      <PackagePath></PackagePath>
    </None>
  </ItemGroup>

</Project>
